[gcode_macro _STATUS_VARIABLES]
# These setup a variable to hold current status and a list of MACROS to call to "effect" something.  Create these needed Macros in the relative hardware section
variable_printer_status   : "READY"
variable_status_effect_macros    : ["_STATUS_CONSOLE", "_STATUS_KLIPPER_SCREEN", "_STATUS_CHAMBER_LED", "_STATUS_TH_LED"]
gcode:


[gcode_macro SET_STATUS]
description: Set Printer Status
gcode:
	{% if params.S %}
		{% set status = params.S|default("READY") %}
	{% else %}
		{% set status = params.STATUS|default("READY") %}
	{% endif %}
#	{ action_respond_info("In SET_STATUS found: " ~ status) }
	SET_GCODE_VARIABLE MACRO=_STATUS_VARIABLES VARIABLE=printer_status	VALUE="'{status}'"
	_EFFECT_STATUS

[gcode_macro RESET_STATUS]
gcode:
	{% if params.D %}
		{% set delay = params.D|default(1) %}
	{% else %}
		{% set delay = params.DELAY|default(1) %}
	{% endif %}
#	{ action_respond_info("Reset status in: " ~ delay) }
	G4 P{delay*1000}
	SET_STATUS
	

[gcode_macro _EFFECT_STATUS]
gcode:
	{% set status = printer['gcode_macro _STATUS_VARIABLES'].printer_status %}
	{% for macro in printer['gcode_macro _STATUS_VARIABLES'].status_effect_macros %}
		{ action_respond_info("Effecting Macro: " ~ macro ~ " with: " ~ status) }
		{macro}
	{% endfor %}
	

# Console Status print
[gcode_macro _STATUS_CONSOLE]
gcode:
	{% set status = printer['gcode_macro _STATUS_VARIABLES'].printer_status %}
	{ action_respond_info("Printer status is: " ~ status) }


# Klipper Screen Status print
[gcode_macro _STATUS_KLIPPER_SCREEN]
gcode:
    {% set status = printer['gcode_macro _STATUS_VARIABLES'].printer_status %}
    {% if not status.endswith('_END') %}
        M117 {status.replace('_', ' ') | title}
#		UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=5
    {% endif %}


################################################
#############  MACRO OVERLOADS  ################
################################################

# Use Pause/Resume for M24/M25
[gcode_macro M24]
description: Resume/Pause Print
rename_existing: M24.1
gcode:
    {% if printer.pause_resume.is_paused %}
		SET_STATUS S=PRINTING
		RESUME
    {% else %}
		SET_STATUS S=PAUSED
        M24.1
    {% endif %}


[gcode_macro M25]
description: Pause Print
rename_existing: M25.1
gcode:
	SET_STATUS S=PAUSED
    PAUSE


#[gcode_macro QUAD_GANTRY_LEVEL]        # this is for Z-tilt, but under the QGL menu entry for knomi.
#description: Level gantry to fixed bed
#gcode:
#   Z_TILT_ADJUST


[gcode_macro Z_TILT_ADJUST]
description: Level Bed to fixed gantry
rename_existing: Z_TILT_ADJUST_SI
gcode:
   SET_STATUS S=Z_TILT
   Z_TILT_ADJUST_SI
   RESET_STATUS

[gcode_macro TURN_OFF_HEATERS]
rename_existing: TURN_OFF_HEATERS_SI
gcode:
	SET_STATUS S=HEATING_EXTRUDER_END
	SET_STATUS S=HEATING_BED_END
	RESET_STATUS
	TURN_OFF_HEATERS_SI {rawparams}
	
[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: SET_HEATER_TEMPERATURE_SI
gcode:
	{% if params.HEATER|upper == "HEATER_BED" %}
		SET_STATUS S=HEATING_BED
	{% elif params.HEATER|upper == "EXTRUDER" %}
		SET_STATUS S=HEATING_EXTRUDER
	{% endif %}
	SET_HEATER_TEMPERATURE_SI {rawparams}
	
# [gcode_macro M109]
# rename_existing: M109.1
# gcode:
    # SET_STATUS S=HEATING_EXTRUDER
    # M109.1 {rawparams}
    # SET_STATUS S=HEATING_EXTRUDER_END
	# RESET_STATUS

[gcode_macro M190]
rename_existing: M190.1
gcode:
    SET_STATUS S=HEATING_BED
    M190.1 {rawparams}
    SET_STATUS S=HEATING_BED_END
	RESET_STATUS
 
[gcode_macro G28]
rename_existing: G28.1
gcode:
    SET_STATUS S=HOMING
	{% set xmax = printer.toolhead.axis_maximum.x|float %}
	{% set ymax = printer.toolhead.axis_maximum.y|float %}
	{% set zmax = printer.toolhead.axis_maximum.z|float %}
	
    M204 S5000
    {%if params.X is defined or params.Y is defined or params.Z is defined %}
        G28.1 {rawparams}
    {% else %}
        G28.1 Y
        G28.1 X
#		G28.1
        G90
        G0 X{xmax/2} Y{ymax/2} F36000		# 600*60 = 36000
        G28.1 Z
    {% endif %}
    SET_STATUS S=HOMING_END
	RESET_STATUS
 
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_SI
gcode:
    SET_STATUS S=BEDMESH
	BED_MESH_CALIBRATE_SI {rawparams}
    SET_STATUS S=BEDMESH_END
	RESET_STATUS
