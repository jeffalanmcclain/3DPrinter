[include status.cfg]

# Base set of Macros


# [gcode_shell_command audio_midi]
# command: setsid -f audio midi
# timeout: 30
# verbose: False


[gcode_macro _START_PRINT]
description: Common Start Print routine
gcode:
	PRINT_START {rawparams}


[gcode_macro PRINT_START]
description: Common Start Print routine
gcode:
	# This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
	# PRINT_START BED=[bed_temperature_initial_layer_single] HOTEND=[nozzle_temperature_initial_layer] CHAMBER=45 PRIMING=false BEDMESH=true
	{% set target_bed = params.BED|default(90)|int %}
	{% set target_hotend = params.HOTEND|default(230)|int %}
	{% set target_chamber = params.CHAMBER|default(40)|int %}
	{% set priming = params.PRIMING|default('false') %}
	{% set bedmesh = params.BEDMESH|default('true') %}
	{% set he_safe = 150 %}
	{% set x_safe = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_safe = printer.toolhead.axis_maximum.y|float / 2 %}
	{% set z_safe = 15 %}
	SET_GCODE_OFFSET Z=0                                 			# Set offset to 0

	HOME_IF_NEEDED                                                  # Home all
	G90                                                   			# Absolute position

	##  Uncomment for bed mesh (1 of 2 for bed mesh)
	{% if target_bed < target_chamber/0.85 %} 
		M118 { "Error BED TEMP (%.0f'C) must be 15%% above CHAMBER TEMP (%.0f'C) ...resetting chamber to %.0f'C" | format(target_bed,target_chamber,target_bed*0.85) }
		{% set target_chamber=target_bed*0.85 %}
	{% endif %}
	
	{% if bedmesh == 'true' %}
		M118 { "Clearing bedmesh..." }
		BED_MESH_CLEAR                                       		# Clear old saved bed mesh (if any)
	{% endif %}
	
	M106 P2 S{ 0.2*255 }                                  			# Turn on the chamber fan 20%
	G1 X{x_safe} Y{y_safe} Z{z_safe} F9000                			# Go to center of the bed
	M118 { "Heating chamber to %.0f'C (currently at %.1f'C) using %.0f'C bed" | format(target_chamber, printer['temperature_sensor Chamber_Top'].temperature, target_bed) }
	M140 S{target_bed}												# Set the target temp for the bed (do NOT wait)
	M109 S{he_safe}													# Set the target temp for extruder to safe temp (do NOT wait)
	SET_STATUS S=BED_HEATING                        				# Status BED_HEATING
	M118 { "Bed to %.0f'C" | format(target_bed) }                  	# Display info on display
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={target_bed}	MAXIMUM={target_bed+2}		# Waits for bed temp
	SET_STATUS S=CHAMBER_HEATING                      				# Status CHAMBER_HEATING
	M118 { "Chamber to %.0f'C" | format(target_chamber) }                  	# Display info on display
	TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber_Top" MINIMUM={target_chamber}	# Waits for chamber temp
	M118 { "Hotend to %.0f'C" | format(he_safe) }                  	# Display info on display
	SET_STATUS S=HOTEND_HEATING										# Status HOTEND_HEATING
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={he_safe} MAXIMUM={he_safe+2}				# Waits for hotend safe temp

	##  Uncomment for Trident (Z_TILT_ADJUST)
	SET_STATUS S=LEVELING                               			# Status LEVELING
	Z_TILT_ADJUST                                        			# Level the printer via Z_TILT_ADJUST
	G28 Z                                                			# Home Z again after Z_TILT_ADJUST                                

	{% if bedmesh == 'true' %}
		M118 { "running bedmesh..." }
		BED_MESH_CALIBRATE                               			# Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh
		M400														# wait a bit
	{% endif %}
	
	M118 { "Calibrate z-offset..." }
	SET_STATUS S=CALIBRATING_NOZZLE                 				# Status CALIBRATING nozzle
	CARTOGRAPHER_TOUCH                                  			# Calibrate z offset only with hot nozzle
	M400															# wait a bit

	# Heat up the hotend up to target via data from slicer
	G1 X{x_safe} Y{y_safe} Z{z_safe} F9000       					# Go to center of the bed
	M106 P99 S0                                           			# Turn off fans
	M118 { "Hotend to %.0f'C" | format(target_hotend) }            	# Display info on display
	SET_STATUS S=HOTEND_HEATING										# Status
	M109 S{target_hotend}											# Set the target temp for extruder to safe temp (do NOT wait)
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={target_hotend} MAXIMUM={target_hotend+2}			# Waits for hotend to temp

	# Get ready to print by doing a primeline and updating status
	SET_STATUS S=PRINTING                       					# Status PRINTING
	{% if priming == 'true' %}
		M118 { "Priming extruder..." }
		G0 X{x_safe - 50} Y4 F10000                   				# Go to starting point
		G0 Z0.4                                   					# Raise Z to 0.4
		G91                                            				# Incremental positioning 
		G1 X100 E20 F1000                             				# Primeline
	{% endif %}
	G90                                            					# Absolute position


[gcode_macro _END_PRINT]
description: Common END Print routine
gcode:
	PRINT_END {rawparams}


[gcode_macro PRINT_END]
gcode:
    {% set th = printer.toolhead %}
	{% set x_park = th.axis_maximum.x - 20 %}
	{% set y_park = th.axis_maximum.y - 20 %}
    {% set z_safe = [th.position.z + 20, th.axis_maximum.z]|min %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                          									# wait for buffer to clear
    G92 E0                        									# zero the extruder
    G1 E-20.0 F3600                									# retract filament

    TURN_OFF_HEATERS

    G90                                    							# absolute positioning
    G0 Z{z_safe} F20000  											# move nozzle to remove stringing
	G0 X{th.axis_maximum.x / 2} Y{th.axis_maximum.y / 2}			# move to middle
    G0 X{x_park} Y{x_park} F3600									# park nozzle at rear right
    M107                                  							# turn off fan
    M106 P99 S0														# redefined set fans to speed (all fans if no P param)

    BED_MESH_CLEAR

    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0
	RESET_STATUS


[gcode_macro HOME_IF_NEEDED]
gcode:
    {% if not "xyz" in printer.toolhead.homed_axes %}
		G28
    {% endif %}


[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
	##### read E from pause macro #####
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	##### set park positon for x and y #####
	# default is your max posion from your printer.cfg
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	##### calculate save lift position #####
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
		{% set z_safe = 2.0 %}
	{% else %}
		{% set z_safe = max_z - act_z %}
	{% endif %}
	SET_STATUS S=PAUSE
	##### end of definitions #####
	PAUSE_BASE
	G91
	{% if printer.extruder.can_extrude|lower == 'true' %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
		G1 Z{z_safe} F900
		G90
		G1 X{x_park} Y{y_park} F6000
	{% else %}
		{action_respond_info("Printer not homed")}
	{% endif %} 


[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}
  SET_STATUS S=PRINTING


[gcode_macro CANCEL_PRINT]
# Defines a G-code macro to cancel the actual running print
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode: 
	G28 Y                                     # Home Y axis
	_TOOLHEAD_PARK_PAUSE_CANCEL               # Call _TOOLHEAD_PARK_PAUSE_CANCEL macro
	TURN_OFF_HEATERS                          # Turn off all heaters
	CANCEL_PRINT_BASE                         # Call CANCEL_PRINT_BASE to cancel print
	M106 P99 S0
	RESET_STATUS


[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state


[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state


[gcode_macro DRAW_LINES]
gcode:
    G90                           # Absolute positioning
    # G92 E0                      # Reset Extruder (commented out for now)
    # G1 Z5.0  F7200              # Move Z Axis up (commented out for now)
    G1 X50  Y0         F7200      # Move to start position
    M83                           # Set extruder to relative mode
    G1 E15 F400                   # Extrude filament
    G1 Z0.28 F7200                # Lower Z axis
    G1 X200 Y0   Z0.28 F1200 E17  # Draw the first line
    G1 X200 Y0.4 Z0.28 F2400      # Move to side a little
    G1 X55  Y0.4 Z0.28 F1200 E34  # Draw the second line
    G92 E0                        # Reset Extruder
    G90                           # Return to absolute positioning


[gcode_macro HEAT_SOAK]
description: Heats the bed and performs a soak.

variable_target_chamber_temp: 0
variable_target_bed_temp: 0
variable_stage: None						# heating -> soaking -> done -> None
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
	{% set CHAMBER = params.CHAMBER | default(50) | int %}
	{% set BED = params.BED | default(100) | int %}
	{% set DURATION = (params.DURATION | default(5) | int) * 60 %} ; minutes to seconds
	{% set NOZZLE = 150 %}
	{% set FANS = 0.2*255|float %}			# 20% fans
	{% set z_safe = 15 %}
	{% set chamber_temp = (printer['temperature_sensor Chamber_Top'].temperature + printer['temperature_sensor Chamber_Bottom'].temperature) / 2.0 | float %}

	{% if BED < CHAMBER/0.85 %} 
		M118 { "Error BED TEMP (%.0f'C) must be 15%% above CHAMBER TEMP (%.0f'C)" | format(BED,CHAMBER) }
	{% else %}
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_bed_temp		VALUE={ BED }
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_chamber_temp	VALUE={ CHAMBER }
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

		# home all axis if not homed
		HOME_IF_NEEDED
		M118 { "Heating chamber to %.0f'C (currently at %.1f'C) using %.0f'C bed for minimum %.1fm" | format(CHAMBER, chamber_temp, BED, DURATION/60.0) }
		
		# move bed up closer to chamber / bed fan for better heating
		G90                 										# use absolute coordinates
		G1 Z{z_safe} F1800      									# move the nozzle near the bed

		M140 S{ BED }    ; set bed temp
		SET_STATUS S=BED_HEATING
		
		#turn off external/filtration fans
		M106 P3 S0
		M118 { "Turning on Chamber Fan %.0f%%" | format(FANS/255*100.0) }		#turn on chamber fans
		M106 P2 S{ FANS }
		
		M118 { "Setting Nozzle Temp to %.0f'C" | format(NOZZLE) }
		M104 S{ NOZZLE }											# set nozzle temperature (no wait)

		UPDATE_DELAYED_GCODE ID=HEAT_SOAKER DURATION={ check_interval }
	{% endif %}


[gcode_macro CANCEL_HEAT_SOAK]
description: Cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=HEAT_SOAKER DURATION=1


[delayed_gcode HEAT_SOAKER]
gcode:
	{% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}
	{% set chamber_temp = (printer['temperature_sensor Chamber_Top'].temperature + printer['temperature_sensor Chamber_Bottom'].temperature) / 2.0 | float %}
	## update total time elapsed
	{% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

	{% set stage = heat_soak.stage %}
	{% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_bed_temp %}
		{% set stage = "soaking" %}
		SET_STATUS S=HEAT_SOAKING
	{% endif %}

	{% if stage == "soaking" %}
		## update soak countdown
		{% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }
		{% if soak_time_remaining == 0 and chamber_temp >= heat_soak.target_chamber_temp %}
			{% set stage = "done" %}
		{% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}
		{% if stage == "cancel" %}
			{% set stage = "done" %}
			M118 { "soak cancelled after %.1fm" | format(total_time_elapsed / 60.0) }
		{% else %}
			M118 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
		{% endif %}
		_SOAK_COMPLETE

		## reset all state vars, except stage, which may be queried via the api
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_chamber_temp	VALUE=0
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_bed_temp		VALUE=0
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining	VALUE=0
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed	VALUE=0

    {% else %}
#		M118 { "Total_time: %.3f %% 60 = %.3f" | format(total_time_elapsed,total_time_elapsed % 60) }
		{% if total_time_elapsed % 60 < [heat_soak.check_interval, 58]|min %}
			## output status periodically
			{% if stage == "heating" %}
				M118 { "heating bed to %.0f'C: currently %.0f'C (%.1fm elapsed)" | format(heat_soak.target_bed_temp, printer.heater_bed.temperature, total_time_elapsed / 60.0) }
			{% elif stage == "soaking" %}
				{% if soak_time_remaining > 0 %}
					M118 { "soaking chamber = %.1f'C / %.0f'C (%.1fm remaining)" | format(chamber_temp, heat_soak.target_chamber_temp, soak_time_remaining / 60.0) }
				{% else %}
					M118 { "soaking chamber = %.1f'C / %.0f'C (%.1fm total soak)" | format(chamber_temp, heat_soak.target_chamber_temp, total_time_elapsed / 60.0) }
				{% endif %}
			{% endif %}
		{% endif %}

		## trigger ourselves again
		UPDATE_DELAYED_GCODE ID=HEAT_SOAKER DURATION={ heat_soak.check_interval }

		## dwell for 1ms to prevent from going idle
		G4 P1

	{% endif %}


[gcode_macro _SOAK_COMPLETE]
description: Finish the soak command
gcode:
    #turn off fans and HOME
    HOME_IF_NEEDED
    M106 P99 S0
    RESPOND TYPE=error MSG="HEAT SOAK complete!!"
    TURN_OFF_HEATERS
	RESET_STATUS


# [gcode_macro MOTOR_BUZZ]
# description: Buzz Motors
# gcode:
	# {% set motor = params.MOTOR|default(X) %}
	
	# stepper_buzz stepper=stepper_{motor}


# [gcode_macro FORCE_HOME]
# description: Force Kinematic position to allow movement manually of motors.  BECAREFUL!!!
# gcode:
	# {% set zpos = params.ZPos|default(125)|float %}

	# SET_KINEMATIC_POSITION Z={zpos}


[gcode_macro Calibrate_Hotend]
description: Run PID calibration on hotend at optional temp set in menu
gcode:
	{% set temp = params.ETemp|default(190)|float %}
	PID_CALIBRATE HEATER=extruder TARGET={temp}


[gcode_macro Calibrate_BedHeater]
description: Run PID calibration on bed heater at optional temp set in menu
gcode:
	{% set temp = params.BTemp|default(90)|float %}
	PID_CALIBRATE HEATER=heater_bed TARGET={temp}


[gcode_macro Razzle_Dazzle]
description: Move head around the space fast!
gcode:
	G0 X175 Y175 Z75 F36000
	G0 X40 Y0 Z50 F36000
	G0 X350 Y355 Z10 F36000
	G0 X350 Y50 Z50 F36000
	G0 X0 Y50 Z100 F36000
	G0 X45 Y340 Z50 F36000
	G0 X175 Y175 Z100 F36000
	G0 X200 Y100 Z75 F36000
	G0 X30 Y50 Z100 F36000
	G0 X175 Y175 Z50 F36000
	G0 X180 Y175 Z50 F36000
	G0 X170 Y175 Z50 F36000
	G0 X175 Y175 Z50 F36000
	G0 Z45
	G0 Z50
	

[gcode_macro LED_STOP]
gcode:
	STOP_LED_EFFECTS
