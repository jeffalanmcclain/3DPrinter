[gcode_macro _STATUS_VARIABLES]
# These setup a variable to hold current status and a list of MACROS to call to "effect" something.  Create these needed Macros in the relative hardware section
variable_printer_status   : "READY"
variable_status_effect_macros    : ["_STATUS_CONSOLE", "_STATUS_KLIPPER_SCREEN"]
#variable_status_effect_macros    : ["_STATUS_CONSOLE", "_STATUS_KLIPPER_SCREEN", "_STATUS_CHAMBER_LED", "_STATUS_TH_LED"]
gcode:

# List of STATUS:  READY, PRINTING, PAUSED, PRIMING, HOMING, LEVELING, HOTEND_HEATING, BED_HEATING, CHAMBER_HEATING, MESHING, CALIBRATING_NOZZLE, CALIBRATING_AXIS

[gcode_macro SET_STATUS]
description: Set Printer Status
gcode:
	{% if params.S %}
		{% set status = params.S|default("READY") %}
	{% else %}
		{% set status = params.STATUS|default("READY") %}
	{% endif %}
#	{ action_respond_info("In SET_STATUS found: " ~ status) }
	SET_GCODE_VARIABLE MACRO=_STATUS_VARIABLES VARIABLE=printer_status	VALUE="'{status}'"
	_EFFECT_STATUS


[gcode_macro RESET_STATUS]
gcode:
	{% if params.D %}
		{% set delay = params.D|default(1) %}
	{% else %}
		{% set delay = params.DELAY|default(1) %}
	{% endif %}
#	{ action_respond_info("Reset status in: " ~ delay) }
	G4 P{delay*1000}
	SET_STATUS
	

[gcode_macro _EFFECT_STATUS]
gcode:
	{% set status = printer['gcode_macro _STATUS_VARIABLES'].printer_status %}
	{% for macro in printer['gcode_macro _STATUS_VARIABLES'].status_effect_macros %}
#		{ action_respond_info("Effecting Macro: " ~ macro ~ " with: " ~ status) }
		{macro}
	{% endfor %}
	

# Console Status print
[gcode_macro _STATUS_CONSOLE]
gcode:
	{% set status = printer['gcode_macro _STATUS_VARIABLES'].printer_status %}
	{ action_respond_info("Printer status is: " ~ status) }


# Klipper Screen Status print
[gcode_macro _STATUS_KLIPPER_SCREEN]
gcode:
    {% set status = printer['gcode_macro _STATUS_VARIABLES'].printer_status %}
    {% if not status.endswith('_END') %}
        M117 {status.replace('_', ' ') | title}
#		UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=5
    {% endif %}


################################################
#############  MACRO OVERLOADS  ################
################################################

# Use Pause/Resume for M24/M25
[gcode_macro M24]
description: Resume/Pause Print
rename_existing: M24.1
gcode:
    {% if printer.pause_resume.is_paused %}
		SET_STATUS S=PRINTING
		RESUME
    {% else %}
		SET_STATUS S=PAUSED
        M24.1
    {% endif %}


[gcode_macro M25]
description: Pause Print
rename_existing: M25.1
gcode:
	SET_STATUS S=PAUSED
    PAUSE


# [gcode_macro QUAD_GANTRY_LEVEL]        # this is for Z-tilt, but under the QGL menu entry for knomi.
# rename_existing: QUAD_GANTRY_LEVEL_SI
# description: Level gantry to fixed bed
# gcode:
   # Z_TILT_ADJUST


[gcode_macro Z_TILT_ADJUST]
description: Level Bed to fixed gantry
rename_existing: Z_TILT_ADJUST_SI
gcode:
   SET_STATUS S=LEVELING
   BED_MESH_CLEAR
   Z_TILT_ADJUST_SI
   G28 FORCE
   RESET_STATUS


[gcode_macro TURN_OFF_HEATERS]
rename_existing: TURN_OFF_HEATERS_SI
gcode:
#	SET_STATUS S=HEATING_EXTRUDER_END
#	SET_STATUS S=HEATING_BED_END
	RESET_STATUS
	TURN_OFF_HEATERS_SI {rawparams}


[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: SET_HEATER_TEMPERATURE_SI
gcode:
	{% if params.HEATER|upper == "HEATER_BED" %}
		SET_STATUS S=BED_HEATING
	{% elif params.HEATER|upper == "EXTRUDER" %}
		SET_STATUS S=HOTEND_HEATING
	{% endif %}
	SET_HEATER_TEMPERATURE_SI {rawparams}


[gcode_macro M109]
rename_existing: M109.1
gcode:
    SET_STATUS S=HOTEND_HEATING
	{% set s = params.S|float %}
    
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
	{% if s != 0 %}
		TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+2}   ; Wait for hotend temp (within 1 degree)
	{% endif %}
	RESET_STATUS


[gcode_macro M190]
rename_existing: M190.1
gcode:
	SET_STATUS S=BED_HEATING
	{% set s = params.S|float %}

	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
	{% if s != 0 %}
		TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+2}  ; Wait for bed temp (within 1 degree)
	{% endif %}
	RESET_STATUS


[gcode_macro G28]
rename_existing: G28.1
gcode:
    SET_STATUS S=HOMING
	{% set p = params|upper %}
	{% set force = 'FORCE' in p %}
	{% set h = printer.toolhead.homed_axes|upper %}
	{% set xmax = printer.toolhead.axis_maximum.x|float %}
	{% set ymax = printer.toolhead.axis_maximum.y|float %}
	{% set y_danger = 50 %}
	
#	M118 { "HOME REQUEST: %s" | format(p) }
#	M118 { "HOMED: %s" | format(h) }

    M204 S5000
	{% set home_all = 'X' not in p and 'Y' not in p and 'Z' not in p %}

	{% if home_all or 'Y' in p %}				# home Y first to avoid hitting front AWD motors in X home
		{% if not 'Y' in h or force %}			# Y not homed or requested force
			G28.1 Y
			{% set h = "Y%s"|format(h) %}		# homed isn't updated in printer at this point, so dummy track ourselves
		{% endif %}
	{% endif %}

#	M118 { "HOMED: %s" | format(h) }
	{% if home_all or 'X' in p %}
		{% if not 'X' in h or force %}			# X not homed or requested force
			{% if not 'Y' in h %}				# MUST home Y if not homed before X or Z
				G28.1 Y
				{% set h = "Y%s"|format(h) %}	# homed isn't updated in printer at this point, so dummy track ourselves
			{% endif %}
			G0 Y{ymax/2} F24000				# go safe Y before homing X
			G28.1 X
			{% set h = "X%s"|format(h) %}		# homed isn't updated in printer at this point, so dummy track ourselves
		{% endif %}
	{% endif %}
#	M118 { "HOMED: %s" | format(h) }

	{% if home_all or 'Z' in p %}
		{% if not 'Z' in h or force %}			# Z not homed or requested force
			{% if not 'Y' in h %}				# MUST home Y if not homed before X or Z
				G28.1 Y
				{% set h = "Y%s"|format(h) %}	# homed isn't updated in printer at this point, so dummy track ourselves
			{% endif %}
			{% if not 'X' in h %}
				G28.1 X
				{% set h = "X%s"|format(h) %}	# homed isn't updated in printer at this point, so dummy track ourselves
			{% endif %}
			G90
			G0 X{xmax/2} Y{ymax/2} F24000		# 400*60 = 24000
			G28.1 Z
			{% set h = "Z%s"|format(h) %}		# homed isn't updated in printer at this point, so dummy track ourselves
		{% endif %}
	{% endif %}
	RESET_STATUS
#	M118 { "HOMED: %s" | format(h) }
  
  

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_SI
gcode:
    SET_STATUS S=MESHING
	BED_MESH_CALIBRATE_SI {rawparams}
	RESET_STATUS


[gcode_macro TEST_RESONANCES]
rename_existing: TEST_RESONANCES_SI
gcode:
	{% set axis = params.AXIS|default('X') %}
	
	SET_STATUS S=CALIBRATING_AXIS
	TEST_RESONANCES_SI AXIS={ axis }
	RESET_STATUS


[gcode_macro CARTOGRAPHER_TOUCH]
rename_existing: CARTOGRAPHER_TOUCH_SI
gcode:
#	{% set axis = params.AXIS|default('X') %}
	
	SET_STATUS S=CALIBRATING_NOZZLE
	CARTOGRAPHER_TOUCH_SI {rawparams}
	RESET_STATUS
