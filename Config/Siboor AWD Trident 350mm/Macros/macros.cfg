[include status.cfg]					# feels like STATUS has to redefine other stuff last?
#[include led_effects.cfg]
[include led.cfg]
[include calibration_macros.cfg]

# Base set of Macros


# [gcode_shell_command audio_midi]
# command: setsid -f audio midi
# timeout: 30
# verbose: False

[delayed_gcode _Initialize_Klipper]
initial_duration: 2.0
gcode:
	# LED_STOP
	# LED_OFF
	# LED_ON
	RESET_STATUS
	

[gcode_macro START_PRINT]
description: Common Start Print routine
gcode:
	PRINT_START {rawparams}


[gcode_macro PRINT_START]
description: Common Start Print routine

variable_adaptive_mesh: "'false'"

gcode:
	# This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
	# PRINT_START BED=[bed_temperature_initial_layer_single] HOTEND=[nozzle_temperature_initial_layer] CHAMBER=45 PRIMING=false BEDMESH=true ADAPTIVE=false
	{% set target_bed = params.BED|default(100)|int %}
	{% set target_hotend = params.HOTEND|default(240)|int %}
	{% set target_chamber = params.CHAMBER|default(45)|int %}
	{% set priming = params.PRIMING|default('true')|lower %}
	{% set force_bedmesh = params.BEDMESH|default('false')|lower %}
	{% set adaptive = params.ADAPTIVE|default('true')|lower %}
	{% set he_safe = 150 %}
	{% set x_safe = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_safe = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	{% set z_safe = 15 %}
	{% set heating_delta = 0.30 %}
	{% set max_chamber = (target_bed*(1-heating_delta))|int %}

	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=adaptive_mesh		VALUE="'{adaptive}'"		# save adaptive bedmesh to global variable so we can clear bedmesh in PRINT_END
	SET_GCODE_OFFSET Z=0                                 			# Set offset to 0
	
	# Ideally, call PRINT_START without BEDMESH or PRIMING, and default would be to prime and run bedmesh IF none was loaded and only z-tilt cal if one hadn't been run.
	
	# LED_STOP
	# LED_OFF
	# LED_ON
	
	M118 { "Printing @ %.0f'C Hotend / %.0f'C bed / %.0f'C chamber" | format(target_hotend, target_bed, target_chamber) }
	M118 { " -- Priming: %s  Bedmesh: %s  Adaptive: %s" | format(priming, force_bedmesh, adaptive) }
	G28		                                             			# Home all (if needed)
	G90                                                   			# Absolute position

	##  Check on good heating delta to target chamber
	{% if max_chamber < target_chamber %} 
		M118 { "Error BED TEMP (%.0f'C) must be %.0f%% above CHAMBER TEMP (%.0f'C) ...resetting chamber to %.0f'C" | format(target_bed, heating_delta*100.0, target_chamber, max_chamber) }
		{% set target_chamber = max_chamber %}
	{% endif %}
	
	{% if (not printer['bed_mesh'].profile_name) %}					# force bedmesh if none loaded
		M118 { "No bedmesh loaded...forcing." }
		{% set force_bedmesh = 'true' %}
	{% endif %}
	
	{% if force_bedmesh == 'true' %}
		M118 { "Clearing bedmesh..." }
		BED_MESH_CLEAR                                       		# Clear old saved bed mesh (if any)
	{% endif %}
	
	M106 P99 S{ 0.2*255 }                                  			# Turn on part/chamber/fume fan 20%
	G1 X{x_safe} Y{y_safe} Z{z_safe} F9000                			# Go to center of the bed
	M118 { "Heating chamber to %.0f'C (currently at %.1f'C) using %.0f'C bed" | format(target_chamber, printer['temperature_sensor Chamber_Top'].temperature, target_bed) }
	M140 S{target_bed}												# Set the target temp for the bed (do NOT wait)
	
	#G4 P2000														# Pause x ms
	# {% if not printer.motors_sync.applied %}
		# M106 P99 S0                                  				# Turn off part/chamber/fume fan
		# SET_STATUS S="MOTOR_SYNC"
		# SYNC_MOTORS													# Call motor sync routine while heating.
		# M106 P99 S{ 0.2*255 }                                  		# Turn on part/chamber/fume fan 20%
	# {% endif %}

	SET_STATUS S=BED_HEATING                        				# Status BED_HEATING
	M118 { "Bed to %.0f'C" | format(target_bed) }                  	# Display info on display
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={target_bed}	MAXIMUM={target_bed+2}		# Waits for bed temp
	
	M118 { "Hotend to %.0f'C" | format(he_safe) }                  	# Display info on display
	M104 S{he_safe}													# Set the target temp for extruder to safe touch temp...don't wait (for now)
	G4 P4000														# Pause x ms

	{% if not printer['z_tilt'].applied %}
		Z_TILT_ADJUST                                      			# Level the printer via Z_TILT_ADJUST ... macro already sets LEVELING status
		M400														# wait for moves to finish
	{% endif %}

	{% if force_bedmesh == 'true' %}
		{% if adaptive == 'true' %}
			M118 { "running adaptive bedmesh..." }
			BED_MESH_CALIBRATE ADAPTIVE=1                     		# Start the adaptive bed mesh
		{% else %}
			M118 { "running bedmesh..." }
			BED_MESH_CALIBRATE                               		# Start the full bed mesh
		{% endif %}
		M400														# wait for moves to finish
	{% endif %}

	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={he_safe} MAXIMUM={he_safe+2}				# Waits for hotend safe temp (just make SURE)
	G28 force
	M118 { "Calibrate z-offset..." }
	CARTOGRAPHER_TOUCH                                  			# Calibrate z offset only with hot nozzle
	M400															# wait for moves to finish

	SET_STATUS S=CHAMBER_HEATING                      				# Status CHAMBER_HEATING
	M118 { "Chamber to %.0f'C" | format(target_chamber) }         	# Display info on display
	TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber_Top" MINIMUM={target_chamber}	# Waits for chamber temp MIN (if hotter, it isn't waiting)
	G4 P2000														# Pause x ms

	# Heat up the hotend up to target via data from slicer
	G1 X{x_safe} Y{y_safe} Z{z_safe} F9000       					# Go to center of the bed
	M106 P99 S0                                           			# Turn off fans
	M118 { "Hotend to %.0f'C" | format(target_hotend) }            	# Display info on display
	SET_STATUS S=HOTEND_HEATING										# Status
	M104 S{target_hotend}											# Set the target temp for extruder to safe temp (do NOT wait)
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={target_hotend} MAXIMUM={target_hotend+2}			# Waits for hotend to temp

	# Get ready to print by doing a primeline and updating status
	{% if priming == 'true' %}
		DRAW_PRIMING_LINES
	{% endif %}
	SET_STATUS S=PRINTING                       					# Status PRINTING
	G90                                            					# Absolute position


[gcode_macro END_PRINT]
description: Common END Print routine
gcode:
	PRINT_END {rawparams}


[gcode_macro PRINT_END]
description: Common END Print routine
gcode:
    {% set th = printer.toolhead %}
	{% set x_park = th.axis_maximum.x - 20 %}
	{% set y_park = th.axis_maximum.y - 20 %}
	{% set x_center = (th.axis_minimum.x|float + th.axis_maximum.x|float ) / 2 %}
	{% set y_center = (th.axis_minimum.y|float + th.axis_maximum.y|float ) / 2 %}
    {% set z_safe = [th.position.z + 60, th.axis_maximum.z]|min %}
	{% set adaptive = printer['gcode_macro PRINT_START'].adaptive_mesh|lower %}
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=adaptive_mesh		VALUE="''"		# clear adaptive bedmesh to global variable so we can clear bedmesh in PRINT_END

    M400                          									# wait for buffer to clear
    G92 E0                        									# zero the extruder
    {% if printer['extruder'].can_extrude|lower == 'true' %}
		G1 E-20.0 F3600                								# retract filament
	{% endif %}
    TURN_OFF_HEATERS

    G90                                    							# absolute positioning
    G0 Z{z_safe} F20000  											# move nozzle to remove stringing
	G0 X{x_center} Y{y_center}										# move to middle
    G0 X{x_park} Y{x_park} F3600									# park nozzle at rear right
    M107                                  							# turn off fan
    M106 P99 S0														# turn off all fans via redefined P99 set fans to speed
	M106 P3 S{255*0.30}												# Leave fume fan on 30%
	M106 P2 S{255*0.15}												# Leave bed fan on 15%

    {% if adaptive == 'true' %}
		BED_MESH_CLEAR
	{% endif %}

    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0
	# M84																# Disable motors to save hold current and power off driver fans eventually
	RESET_STATUS


[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
	##### read E from pause macro #####
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	##### set park positon for x and y #####
	# default is your max posion from your printer.cfg
	{% set x_park = printer.toolhead.axis_maximum.x|float - 20 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 20 %}
	##### calculate save lift position #####
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% set z_safe = [printer.toolhead.position.z + 60, printer.toolhead.axis_maximum.z]|min %}
	
	SET_STATUS S=PAUSED
	##### end of definitions #####
	PAUSE_BASE
	G91
	{% if printer.extruder.can_extrude|lower == 'true' %}
		G1 E-{E} F2100
	{% else %}
		{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
		G1 Z{z_safe} F900
		G90
		G1 X{x_park} Y{y_park} F6000
	{% else %}
		{action_respond_info("Printer not homed")}
	{% endif %} 


[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}
  SET_STATUS S=PRINTING


[gcode_macro CANCEL_PRINT]
# Defines a G-code macro to cancel the actual running print
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
	PRINT_END


[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state


[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E5 F{speed} # purge/heat tip
    G1 E-{purge_distance} F{speed} # pull purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state


[gcode_macro DRAW_PRIMING_LINES]
description: Purge lines at front of bed
gcode:
#	Originally was going to make this a function of your print bed size, but just ended up using code from slicer output.
#	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
#	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}

	M118 { "Priming extruder..." }
	SET_STATUS S=PRIMING                       					# Status PRIMING
	G28					# Home (if needed)	G90
	G21
	M83 ; use relative distances for extrusion
	G1 X249.032 Y4.175 F36000
	M73 P9 R0
	G1 Z.4
	M73 P10 R0
	G1 Z.2
	G1 E.5 F2100
	;TYPE:Inner wall
	;WIDTH:0.39292
	G1 F3000
	G1 X100.575 Y4.175 E8
	M73 P32 R0
	G1 X100.575 Y3.825 E.02
	G1 X249.425 Y3.825 E7
	M73 P54 R0
	G1 X249.425 Y4.175 E.02
	G1 X249.072 Y4.175 E.02
	G1 X249.6 Y4.204 F36000
	;TYPE:Outer wall
	;WIDTH:0.399999
	G1 F3000
	G1 X249.8 Y4.55
	G1 X100.2 Y4.55 E5
	M73 P76 R0
	G1 X100.2 Y3.45 E.04
	G1 X249.8 Y3.45 E5
	M73 P98 R0
	G1 X249.8 Y4.51 E.04
	M73 P99 R0
	G1 E-.4 F2100
	;WIPE_START
	G1 F3000
	G1 X247 Y4.52
	;WIPE_END
	G1 Z1.0
    G90                        					# Absolute positioning
	RESET_STATUS


[gcode_macro HEAT_SOAK]
description: Heats the bed and performs a soak that can be interupted

variable_target_chamber_temp: 0
variable_target_bed_temp: 0
variable_stage: None														# heating -> soaking -> done -> None
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
	{% set CHAMBER = params.CHAMBER | default(50) | int %}
	{% set BED = params.BED | default(100) | int %}
	{% set DURATION = (params.DURATION | default(5) | int) * 60 %} 			# minutes to seconds
	{% set NOZZLE = 150 %}
	{% set FANS = 0.2*255|float %}											# 20% fans
	{% set z_safe = 15 %}
	{% set chamber_temp = (printer['temperature_sensor Chamber_Top'].temperature + printer['temperature_sensor Chamber_Bottom'].temperature) / 2.0 | float %}

	{% if BED < CHAMBER/0.85 %} 
		M118 { "Error BED TEMP (%.0f'C) must be 15%% above CHAMBER TEMP (%.0f'C)" | format(BED,CHAMBER) }
	{% else %}
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_bed_temp		VALUE={ BED }
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_chamber_temp	VALUE={ CHAMBER }
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

		G28					# Home (if needed)		M118 { "Heating chamber to %.0f'C (currently at %.1f'C) using %.0f'C bed for minimum %.1fm" | format(CHAMBER, chamber_temp, BED, DURATION/60.0) }
		
		# move bed up closer to chamber / bed fan for better heating
		G90                 												# use absolute coordinates
		G1 Z{z_safe} F1800      											# move the nozzle near the bed

		M140 S{ BED }    ; set bed temp
		SET_STATUS S=BED_HEATING
		
		#turn off external/filtration fans
		M106 P3 S0
		M118 { "Turning on Chamber Fan %.0f%%" | format(FANS/255*100.0) }	#turn on chamber fans
		M106 P2 S{ FANS }
		
		M118 { "Setting Nozzle Temp to %.0f'C" | format(NOZZLE) }
		M104 S{ NOZZLE }													# set nozzle temperature (no wait)

		UPDATE_DELAYED_GCODE ID=HEAT_SOAKER DURATION={ check_interval }
	{% endif %}


[gcode_macro CANCEL_HEAT_SOAK]
description: Cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=HEAT_SOAKER DURATION=1


[delayed_gcode HEAT_SOAKER]
gcode:
	{% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}
	{% set chamber_temp = (printer['temperature_sensor Chamber_Top'].temperature + printer['temperature_sensor Chamber_Bottom'].temperature) / 2.0 | float %}
	## update total time elapsed
	{% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

	{% set stage = heat_soak.stage %}
	{% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_bed_temp %}
		{% set stage = "soaking" %}
		SET_STATUS S=HEAT_SOAKING
	{% endif %}

	{% if stage == "soaking" %}
		## update soak countdown
		{% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }
		{% if soak_time_remaining == 0 and chamber_temp >= heat_soak.target_chamber_temp %}
			{% set stage = "done" %}
		{% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}
		{% if stage == "cancel" %}
			{% set stage = "done" %}
			M118 { "soak cancelled after %.1fm" | format(total_time_elapsed / 60.0) }
		{% else %}
			M118 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
		{% endif %}
		_SOAK_COMPLETE

		## reset all state vars, except stage, which may be queried via the api
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_chamber_temp	VALUE=0
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_bed_temp		VALUE=0
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining	VALUE=0
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed	VALUE=0

    {% else %}
#		M118 { "Total_time: %.3f %% 60 = %.3f" | format(total_time_elapsed,total_time_elapsed % 60) }
		{% if total_time_elapsed % 60 < [heat_soak.check_interval, 58]|min %}
			## output status periodically
			{% if stage == "heating" %}
				M118 { "heating bed to %.0f'C: currently %.0f'C (%.1fm elapsed)" | format(heat_soak.target_bed_temp, printer.heater_bed.temperature, total_time_elapsed / 60.0) }
			{% elif stage == "soaking" %}
				{% if soak_time_remaining > 0 %}
					M118 { "soaking chamber = %.1f'C / %.0f'C (%.1fm remaining)" | format(chamber_temp, heat_soak.target_chamber_temp, soak_time_remaining / 60.0) }
				{% else %}
					M118 { "soaking chamber = %.1f'C / %.0f'C (%.1fm total soak)" | format(chamber_temp, heat_soak.target_chamber_temp, total_time_elapsed / 60.0) }
				{% endif %}
			{% endif %}
		{% endif %}

		## trigger ourselves again
		UPDATE_DELAYED_GCODE ID=HEAT_SOAKER DURATION={ heat_soak.check_interval }

		## dwell for 1ms to prevent from going idle
		G4 P1

	{% endif %}


[gcode_macro _SOAK_COMPLETE]
description: Finish the soak command
gcode:
    #turn off fans and HOME
	G28					# Home (if needed)    M106 P99 S0
    RESPOND TYPE=error MSG="HEAT SOAK complete!!"
    TURN_OFF_HEATERS
	RESET_STATUS

