#####################################################################
# 	                 Cartographer V3 （ADXL345）
#####################################################################

[scanner]
#    Fill in the UUID that was just recorded           
canbus_uuid: 3ccf7d85325a
#   Offsets are measured from the centre of your coil, to the tip of your nozzle 
#   on a level axis. It is vital that this is accurate. 
x_offset: 0                          
y_offset: 24.6                         
#    leave this as touch unless you want to use scan only for everything. 
mode: touch
#    this must be set as cartographer unless using IDM etc.
sensor: cartographer
#    alternate name to call commands. CARTO_TOUCH etc
sensor_alt: carto
#    This is the default and will be overwritten and added to the DO NOT SAVE area by using UI to save z offset
scanner_touch_z_offset: 0.05         
# number of bedmesh to run
mesh_runs: 2

#   Backlash compensation distance for removing Z backlash before measuring
#   the sensor response.
# C		0.00624
# FL	0.00375
# BL	0.00597
# BR	0.00691
# FR	0.00392
backlash_comp: 0.005

# 12/14/24 90'C -- CARTOGRAPHER_THRESHOLD_SCAN
# Qualify attempt 3 successful with std dev: 0.00156
# Optimal Threshold Determined: 1750 with standard deviation of 0.00156
scanner_touch_threshold = 1750
scanner_touch_speed = 3


#Add a stepper_z redefine for endstop
[stepper_z]
endstop_pin: probe:z_virtual_endstop	# Uses cartographer virtual endstop


# 12/14/24 90'C -- CARTOGRAPHER_CALIBRATE METHOD=manual
[scanner model default]
model_coef = 1.399125707144376,
	1.821087592935923,
	0.7647067508485841,
	0.3476251371964133,
	0.3251245907879048,
	0.39419114641116987,
	-0.11855730495392217,
	-0.355450428474381,
	0.1798326776590149,
	0.24364792981773173
model_domain = 3.2035304757282887e-07,3.3231250117111067e-07
model_range = 0.100000,5.000000
model_temp = 54.272226
model_offset = 0.00000
model_mode = touch
model_fw_version = CARTOGRAPHER 5.1.0


[adxl345]
cs_pin: scanner:PA3
spi_bus: spi1
axes_map: -z,y,x

[resonance_tester]
accel_chip: adxl345             			# Specifies ADXL345 accelerometer for resonance testing
probe_points: 175, 175, 20                	# Coordinates of the probe points for resonance testing

[temperature_sensor MCU_Carto]
sensor_type: temperature_mcu
sensor_mcu: scanner
min_temp: 0
max_temp: 100


######################################################################################
######  Macros
######################################################################################


[gcode_macro PROBE_CALIBRATE]
gcode:
   CARTOGRAPHER_CALIBRATE


[gcode_macro DATA_SAMPLE]
gcode:
  G90
  M106 S255
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM=40
  RESPOND TYPE=command MSG='Starting Phase 1 of 4'
  M117 Starting Phase 1 of 4
  M106 S0
  G28
  G0 Z1
  M104 S250
  M140 S110
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data1
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM=55
  CARTOGRAPHER_STREAM FILENAME=data1
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM=40

  M117 Starting Phase 2 of 4
  RESPOND TYPE=command MSG='Starting Phase 2 of 4'
  M106 S0
  G28 Z0
  G0 Z2
  M104 S250
  M140 S110
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data2
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM=55
  CARTOGRAPHER_STREAM FILENAME=data2
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM=40

  M117 "Starting Phase 3 of 4"
  RESPOND TYPE=command MSG='Starting Phase 3 of 4'
  M106 S0
  G28 Z0
  G0 Z3
  M104 S250
  M140 S110
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data3
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM=55
  CARTOGRAPHER_STREAM FILENAME=data3
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  M117 Waiting for Coil to cool to 40
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM=40

  M117 "Starting Phase 4 of 4"
  RESPOND TYPE=command MSG='Starting Phase 4 of 4'
  M106 S0
  G28 Z0
  G0 Z5
  M104 S250
  M140 S110
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data4
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM=55
  CARTOGRAPHER_STREAM FILENAME=data4
  M104 S0
  M140 S0
  RESPOND TYPE=command MSG='Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/'
  M117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"
  RESPOND TYPE=command MSG='Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta'
  M117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"



[motors_sync]
# https://github.com/MRX8024/motors-sync/blob/main/wiki/EN.md
axes: x,y
#    Axes on which calibration will be performed.
accel_chip: adxl345
#    Accelerometer for vibrations collection: adxl345 / mpu9250 etc.
#chip_filter: median
#    Filter type for data from the accelerometer: 'median' works well in
#    most cases, but some particularly noisy printers (fans, etc.) may
#    require a more powerful filter - 'kalman'. On lis2dw filters disabled.
#median_size: 3
#    Median filter window size.
#kalman_coeffs: 1.1, 1., 1e-1, 1e-2, .5, 1.
#    Simple coefficients describing the kalman filter.
microsteps: 32
#    Maximum microstepping displacement of the stepper motor rotor.
#sync_method: default
#    Methods for synchronizing two axes on interconnected kinematics:
#    'alternately' - the axes calibrated alternately, step by step. (default)
#    'synchronous' - the axes calibrated depending on their magnitude,
#    trying to keep it at the same level.
#    Methods for synchronizing axis/axes on NOT-interconnected kinematics:
#    'sequential' - axes are calibrated sequentially. (default)
# Run 12/17/24
model: exponential
#    Model of the dependence of the microstep displacement of a stepper
#    motor on the magnitude of the measured oscillations. Supported
#    models: linear, quadratic, power, root, hyperbolic, exponential.
model_coeffs: 6905.4832286225,0.0443039452,1045.9401821282
#    Coefficients above the described model, for calculating microsteps.
#max_step_size: 3
#    The maximum number of microsteps that the motor can take move at time,
#    to achieve the planned magnitude.
#axes_steps_diff: 4
#    The difference in the positions of the motors in microsteps between
#    the two axes, to update the magnitude of the secondary axis. It is
#    used in the synchronous method, or in the process of axis alignment
#    in the alternately method. The typical value is max_step_size + 1.
#retry_tolerance: 0
#    The forced threshold to which a pair of stepper motors on one belt
#    will have to lower the magnitude of the oscillations. It's recommended
#    to configure in order to filter possible inaccuracies. After several
#    iterations of starting synchronization, you will find the edge, to
#    which this parameter should be omitted.
#retries: 0
#    The maximum number of repetitions to achieve the forced threshold of
#    oscillations.
head_fan: Hotend_Fan
#    Toolhead fan, which will be turned off during sync to eliminate noise.