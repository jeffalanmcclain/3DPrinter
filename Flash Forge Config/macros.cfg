[include status.cfg]

# define overrides for Mainsail/Fluidd predefined macros - see client.cfg
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : -105.0  ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : -105.0  ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 10.0    ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_speed_hop        : 25.0    ; z move speed in mm/s
variable_speed_move       : 300.0   ; move speed in mm/s
variable_user_cancel_macro: "_CANCEL_PRINT_WITH_AUDIO_WARNING"
variable_park_at_cancel   : True    ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 105     ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 105     ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_runout_sensor    : "filament_switch_sensor runout_sensor"
gcode:

[gcode_macro _START_PRINT]
description: Common Start Print routine
gcode:
	PRINT_START {rawparams}


[gcode_macro PRINT_START]
description: Common Start Print routine
gcode:
    {% set bed_temp = params.BED_TEMP|default(60)|float %}             ; bed temp, usually set by slicer
    {% set extruder_temp = params.EXTRUDER_TEMP|default(200)|float %}  ; extruder temp, usually set by slicer
    {% set disable_priming = params.DISABLE_PRIMING|default(false) %}  ; allow disabling of priming before print
    {% set disable_skew = params.DISABLE_SKEW_CORRECT|default(false) %}; if true it will not apply the skew correction profile
    {% set force_leveling = params.FORCE_LEVELING|default(false) %}    ; if true it forces the bed level process

    SET_SKEW CLEAR=1        ; reset skew profile if loaded
    SET_GCODE_OFFSET Z=0.0  ; reset the G-Code Z offset (adjust Z offset if needed)
	# Reset things like flow-rate, speed, etc.
	M220 S100
	M221 S100
    G28                     ; home the printer

    # auto leveling, if no mesh loaded or force_leveling was set
    {%if (not printer['bed_mesh'].profile_name) or force_leveling %}
        AUTO_BED_LEVEL BED_TEMP={bed_temp} EXTRUDER_TEMP={extruder_temp}
    {% endif %}

    G90                     ; use absolute coordinates
    G1 Z10 F1800            ; move the nozzle near the bed
    M140 S{bed_temp}        ; start bed heating
    # wait for bed to reach temp, don't wait for stabilization
	SET_STATUS S=HEATING_BED
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp}
	SET_STATUS S=HEATING_BED_END
	RESET_STATUS
    
    M104 S{extruder_temp}   ; set nozzle temperature
    # wait for nozzle to reach temp, don't wait for stabilization
	SET_STATUS S=HEATING_EXTRUDER
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp}
	SET_STATUS S=HEATING_EXTRUDER_END
	RESET_STATUS

    # prime nozzle before print if not disabled
    {% if not disable_priming %}
        _PRIME_NOZZLE
    {% endif %}

    # load skew profile
    {% if not disable_skew %}
        SKEW_PROFILE LOAD=skew_profile
    {% endif %}
	SET_STATUS S=PRINTING
	

[gcode_macro _CANCEL_PRINT_WITH_AUDIO_WARNING]
gcode:
    _COMMON_END_PRINT
    M300 S116 P350
    M300 S61 P1000


[gcode_macro _END_PRINT]
description: Common END Print routine
gcode:
	PRINT_END {rawparams}


[gcode_macro PRINT_END]
description: Finish Print and clean up
gcode:
    G91                     ; relative positioning
    G1 X-2 Y-2 E-5 F2000    ; move away while retracting filament
    _COMMON_END_PRINT
    PLAY_MIDI FILE="getitem.mid" C=0


[gcode_macro _COMMON_END_PRINT]
# _COMMON_END_PRINT is used by END_PRINT and CANCEL_PRINT
gcode:
    SET_SKEW CLEAR=1
    M104 S0                 ; turn off extruder temperature
    M140 S0                 ; turn off bed temperature
    M107                    ; turn off part cooling fan
    G90                     ; absolute positioning
    G1 X105 Y105 Z220 F1500 ; move near end stop position
    M84                     ; disable motors
	RESET_STATUS
	


[gcode_macro _PRIME_NOZZLE]
gcode:
    # Copied from Flashforge AD5M Orca Slicer Profile this prints 3 lines right up front just outside printable area for nozzle prime.
    G90
    M83
    G1 E-1.5 F800
    G1 X110 Y-110 F6000
    G1 E2 F800
    G1 Y-110 X55 Z0.25 F4800
    G1 X-55 E8 F2400
    G1 Y-109.6 F2400
    G1 X55 E5 F2400
    G1 Y-110 X55 Z0.45 F4800
    G1 X-55 E8 F2400
    G1 Y-109.6 F2400
    G1 X55 E5 F2400
    G92 E0


[gcode_macro HEAT_SOAK]
description: Heats the bed and performs a soak.

variable_target_bed_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set BED = params.BED | default(100) | float %}
    {% set DURATION = (params.DURATION | default(5) | int) * 60 %} ; minutes to seconds
    {% set NOZZLE = 150 %}
    {% set FANS = 35 %}     ; out of 255

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_bed_temp     VALUE={ BED }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    # home all axis if not homed
    {% if not "xyz" in printer.toolhead.homed_axes %}
        G28
    {% endif %}

    # move bed up closer to chamber / bed fan for better heating
    G90                     ; use absolute coordinates
    G1 Z10 F1800            ; move the nozzle near the bed

    M117 { "Heat Soaking for %.1fm" | format(DURATION/60.0) }
    M118 { "Heat Soaking for %.1fm" | format(DURATION/60.0) }
    M117 { "heating to %.0f'C -- %.0f'C" | format(BED, printer.heater_bed.temperature) }
    M118 { "heating to %.0f'C -- %.0f'C" | format(BED, printer.heater_bed.temperature) }
    M140 S{ BED }    ; set bed temp
    
    #turn off external/filtration fans
    M106 P3 S0
    #turn on chamber fans 
    RESPOND TYPE=echo MSG={ "'Turning on Chamber Fans %.0f%%'" | format(FANS/255*100.0) }
    M106 P2 S{ FANS }
    
    RESPOND TYPE=echo MSG={ "'Setting Nozzle Temp to %.0fC'" | format(NOZZLE) }
    M104 S{ NOZZLE }   ; set nozzle temperature

    UPDATE_DELAYED_GCODE ID=HEAT_SOAKER DURATION={ check_interval }


[gcode_macro CANCEL_HEAT_SOAK]
description: Cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=HEAT_SOAKER DURATION=1


[delayed_gcode HEAT_SOAKER]
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_bed_temp %}
        {% set stage = "soaking" %}
		SET_STATUS S=HEATING_BED_END
		G4 P2000
		SET_STATUS S=HEAT_SOAKING
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
            M118 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
            M118 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}
		SET_STATUS S=HEAT_SOAKING_END
		RESET_STATUS
        _SOAK_COMPLETE

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_bed_temp     VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 60 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
                M118 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
                M118 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=HEAT_SOAKER DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}


[gcode_macro _SOAK_COMPLETE]
description: Finish the soak command
gcode:
    #turn off chamber fans and HOME
    G28
    M106 P2 S0
    RESPOND TYPE=error MSG="HEAT SOAK complete!!"
	RESET_STATUS


[delayed_gcode _CLEAR_DISPLAY]
gcode:
	M117


[gcode_macro _FILAMENT_RUNOUT_EVENT]
gcode:
    PAUSE
	SET_STATUS S=PAUSE
    M400
    RESPOND TYPE=command MSG="action:prompt_begin Filament runout detected"
    RESPOND TYPE=command MSG="action:prompt_text The filament sensor has detected filament runout. Please load filament and press resume."
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button Load|LOAD_FILAMENT|primary"
    RESPOND TYPE=command MSG="action:prompt_button Unload|UNLOAD_FILAMENT|primary"
    RESPOND TYPE=command MSG="action:prompt_button Purge|PURGE_FILAMENT|primary"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_footer_button Resume|_INTERACTIVE_LOAD_END"
    RESPOND TYPE=command MSG="action:prompt_show"


[gcode_macro M600]
description: Filament Change request
gcode:
    {% set X = params.X|default(printer['gcode_macro _CLIENT_VARIABLE'].custom_park_x)|float %}
    {% set Y = params.Y|default(printer['gcode_macro _CLIENT_VARIABLE'].custom_park_y)|float %}
    {% set Z = params.Z|default(printer['gcode_macro _CLIENT_VARIABLE'].custom_park_dz)|float %}
	SET_STATUS S=PAUSE
    PAUSE X={X} Y={Y} Z_MIN={Z}
    M400
    RESPOND TYPE=command MSG="action:prompt_begin Filament change"
    RESPOND TYPE=command MSG="action:prompt_text Filament change requested. Please load new filament and press resume."
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button Load|LOAD_FILAMENT|primary"
    RESPOND TYPE=command MSG="action:prompt_button Unload|UNLOAD_FILAMENT|primary"
    RESPOND TYPE=command MSG="action:prompt_button Purge|PURGE_FILAMENT|primary"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_footer_button Resume|_INTERACTIVE_LOAD_END"
    RESPOND TYPE=command MSG="action:prompt_show"


[gcode_macro _INTERACTIVE_LOAD_END]
gcode:
    RESPOND TYPE=command MSG="action:prompt_end"
    RESUME


[gcode_shell_command backlight]
command: setsid -f backlight
timeout: 1.
verbose: False


[gcode_macro LCD_ON]
description: Turn on the lcd screen and set the brightness in percent.
gcode:
  {% set brightness = params.BACKLIGHT|default("50") %}
  RUN_SHELL_COMMAND CMD=backlight PARAMS="{brightness}"


[gcode_macro LCD_OFF]
description: Turn off the lcd screen.
gcode:
  LCD_ON BACKLIGHT=0


[gcode_shell_command audio_freq]
command: audio freq
timeout: 3
verbose: False


[gcode_shell_command audio_midi]
command: setsid -f audio midi
timeout: 30
verbose: False


[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(10)|float %}
    RUN_SHELL_COMMAND CMD=audio_freq PARAMS="-f {S} -d {P / 1000}"


[gcode_macro PLAY_MIDI]
gcode:
    {% set FILE = params.FILE|default("getitem.mid")|string %}
    {% set C = params.C|default(0)|string %}
    RUN_SHELL_COMMAND CMD=audio_midi PARAMS="-m /usr/share/midis/{FILE} -c {C}"


[gcode_shell_command reboot-stock-system]
command: reboot-stock-system
timeout: 5
verbose: False


[gcode_macro REBOOT_STOCK_SYSTEM]
description: Reboot the printer to stock system.
gcode:
    {% if printer["idle_timeout"].state == "Printing" %}
        {action_raise_error("Not possible during print.")}
    {% endif %}

    RESPOND TYPE=command MSG="action:prompt_begin Question"
    RESPOND TYPE=command MSG="action:prompt_text The printer will reboot and start the stock Flashforge system. Select REBOOT to continue."
    RESPOND TYPE=command MSG="action:prompt_footer_button Abort|RESPOND TYPE=command MSG=action:prompt_end"
    RESPOND TYPE=command MSG="action:prompt_footer_button Reboot|_REBOOT_STOCK_SYSTEM|error"
    RESPOND TYPE=command MSG="action:prompt_show"


[gcode_macro _REBOOT_STOCK_SYSTEM]
gcode:
    TURN_OFF_HEATERS
    M84 ; disable stepper motors
    RUN_SHELL_COMMAND CMD=reboot-stock-system


[gcode_shell_command remove-klipper-mod]
command: remove-klipper-mod -f
timeout: 5
verbose: False


[gcode_macro REMOVE_KLIPPER_MOD]
description: Remove Klipper MOD from the printer.
gcode:
    {% if printer["idle_timeout"].state == "Printing" %}
        {action_raise_error("Not possible during print.")}
    {% endif %}

    RESPOND TYPE=command MSG="action:prompt_begin Question"
    RESPOND TYPE=command MSG="action:prompt_text Klipper Mod will remove itself from the printer. All data related to the mod including G-Codes files will be lost. Select REMOVE to continue."
    RESPOND TYPE=command MSG="action:prompt_footer_button Abort|RESPOND TYPE=command MSG=action:prompt_end"
    RESPOND TYPE=command MSG="action:prompt_footer_button Remove|_REMOVE_KLIPPER_MOD|error"
    RESPOND TYPE=command MSG="action:prompt_show"


[gcode_macro _REMOVE_KLIPPER_MOD]
gcode:
    TURN_OFF_HEATERS
    M84 ; disable stepper motors
    RUN_SHELL_COMMAND CMD=remove-klipper-mod


## Shutdown commands
[gcode_shell_command stop-and-sync]
command: sh -c /usr/libexec/shutdown
timeout: 15
verbose: True


[gcode_shell_command shutdown-ad5m]
command: systemctl poweroff
timeout: 15
verbose: False


[gcode_macro SHUTDOWN]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin Question"
    RESPOND TYPE=command MSG="action:prompt_text Klipper Mod will shutdown. This will end any active prints. Are you sure?"
    RESPOND TYPE=command MSG="action:prompt_footer_button Abort|RESPOND TYPE=command MSG=action:prompt_end"
    RESPOND TYPE=command MSG="action:prompt_footer_button Shutdown|_SHUTDOWN_STAGE|error"
    RESPOND TYPE=command MSG="action:prompt_show"


[gcode_macro _POWER_OFF]
gcode:
    SET_PIN PIN=_power_off VALUE=0


[gcode_macro _SHUTDOWN_BUTTON_TRIGGER]
variable_trigger_allowed: False
gcode:
    {% if trigger_allowed %}
        # Reset button state, otherwise only one trigger can occur
        SET_PIN PIN=_clear_power_off VALUE=1
        # There is a deboucing circuit which needs some delay
        G4 P500
        # Disable pin again otherwise on reset the button will be triggered 1-3 times
        SET_PIN PIN=_clear_power_off VALUE=0
        RESPOND TYPE=error MSG="Shutdown triggered by button"
        SHUTDOWN
    {% endif %}


[delayed_gcode _PRO_BUTTON_BOUNCE_GUARD]
# Guard is needed as the button might trigger 0-2 times on RESTART
initial_duration: 1
gcode:
    SET_GCODE_VARIABLE MACRO=_SHUTDOWN_BUTTON_TRIGGER VARIABLE=trigger_allowed VALUE=True


[gcode_macro _SHUTDOWN_STAGE]
gcode:
# remove promt as sometimes it gets stuck in fluidd
    RESPOND TYPE=command MSG=action:prompt_end
    RUN_SHELL_COMMAND CMD=stop-and-sync
# power off will not do anything on a ad5m non pro
    _POWER_OFF
    RUN_SHELL_COMMAND CMD=shutdown-ad5m


[gcode_macro AUTO_SHUTDOWN]
gcode:
  UPDATE_DELAYED_GCODE ID=AUTO_SHUTDOWN_CHECK DURATION=30
    

[delayed_gcode AUTO_SHUTDOWN_CHECK]
gcode:
  {% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
    {% if printer.extruder.temperature < 50.0 and printer.heater_bed.temperature < 50.0 %}
        {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
            UPDATE_DELAYED_GCODE ID=AUTO_SHUTDOWN_CHECK DURATION=0
            _SHUTDOWN_STAGE
        {% else %}
            UPDATE_DELAYED_GCODE ID=AUTO_SHUTDOWN_CHECK DURATION=2
        {% endif %}
    {% else %}
        {% if printer.idle_timeout.state == "Printing" %}
            UPDATE_DELAYED_GCODE ID=AUTO_SHUTDOWN_CHECK DURATION=0
        {% else %}
            {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
                UPDATE_DELAYED_GCODE ID=AUTO_SHUTDOWN_CHECK DURATION=2
            {% else %}
                UPDATE_DELAYED_GCODE ID=AUTO_SHUTDOWN_CHECK DURATION=0
            {% endif %}
        {% endif %}
    {% endif %}
  {% endif %}